// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.AdminService.Data;

#nullable disable

namespace School.AdminService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250901022750_initTablesAndSeedData")]
    partial class initTablesAndSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("School.AdminService.Data.Entities.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AcademicYearId");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<long>("PersonalInfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("StreetDetail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ThanaId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AddressId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PersonalInfoId");

                    b.HasIndex("ThanaId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.ClassSection", b =>
                {
                    b.Property<int>("ClassSectionId")
                        .HasColumnType("int");

                    b.Property<int>("ClassesId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassSectionId");

                    b.HasIndex("ClassesId");

                    b.HasIndex("SectionId");

                    b.ToTable("ClassSection");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Classes", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("int");

                    b.Property<string>("ClassesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassesId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Bangladesh"
                        });
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DivisionsId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DistrictId");

                    b.HasIndex("DivisionsId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            DistrictId = 101,
                            DistrictName = "Chattogram",
                            DivisionsId = 1,
                            Remarks = "Metropolitan City"
                        },
                        new
                        {
                            DistrictId = 102,
                            DistrictName = "Cox’s Bazar",
                            DivisionsId = 1,
                            Remarks = "Tourist City"
                        },
                        new
                        {
                            DistrictId = 103,
                            DistrictName = "Bandarban",
                            DivisionsId = 1,
                            Remarks = "Hill Tract"
                        },
                        new
                        {
                            DistrictId = 104,
                            DistrictName = "Rangamati",
                            DivisionsId = 1,
                            Remarks = "Hill Tract"
                        },
                        new
                        {
                            DistrictId = 105,
                            DistrictName = "Khagrachari",
                            DivisionsId = 1,
                            Remarks = "Hill Tract"
                        },
                        new
                        {
                            DistrictId = 106,
                            DistrictName = "Feni",
                            DivisionsId = 1,
                            Remarks = "North of Chattogram"
                        },
                        new
                        {
                            DistrictId = 107,
                            DistrictName = "Noakhali",
                            DivisionsId = 1,
                            Remarks = "Coastal District"
                        },
                        new
                        {
                            DistrictId = 108,
                            DistrictName = "Lakshmipur",
                            DivisionsId = 1,
                            Remarks = "Near Noakhali"
                        },
                        new
                        {
                            DistrictId = 109,
                            DistrictName = "Brahmanbaria",
                            DivisionsId = 1,
                            Remarks = "Eastern District"
                        },
                        new
                        {
                            DistrictId = 110,
                            DistrictName = "Cumilla",
                            DivisionsId = 1,
                            Remarks = "Major City"
                        },
                        new
                        {
                            DistrictId = 111,
                            DistrictName = "Chandpur",
                            DivisionsId = 1,
                            Remarks = "River District"
                        });
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DivisionId");

                    b.HasIndex("CountriesId");

                    b.ToTable("Divisions");

                    b.HasData(
                        new
                        {
                            DivisionId = 1,
                            CountriesId = 1,
                            DivisionName = "Chattogram"
                        });
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.FeesCollectionDetail", b =>
                {
                    b.Property<long>("FeesCollectionDetailId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FeesAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("FeesCollectionMasterId")
                        .HasColumnType("bigint");

                    b.Property<int>("FeesNameId")
                        .HasColumnType("int");

                    b.Property<int?>("FromMonth")
                        .HasColumnType("int");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ToMonth")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FeesCollectionDetailId");

                    b.HasIndex("FeesCollectionMasterId");

                    b.HasIndex("FeesNameId");

                    b.ToTable("FeesCollectionDetails");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.FeesCollectionMaster", b =>
                {
                    b.Property<long>("FeesCollectionMasterId")
                        .HasColumnType("bigint");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CollectDate")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExtraDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExtraDiscountReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("GrandTotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsAdmitFees")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<long>("StudentInfoId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FeesCollectionMasterId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("StudentInfoId");

                    b.ToTable("FeesCollectionMasters");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.FeesName", b =>
                {
                    b.Property<int>("FeesNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeesNameId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeesCollectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FeesNameId");

                    b.ToTable("FeesNames");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.FeesSetup", b =>
                {
                    b.Property<long>("FeesSetupId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("AppliedDate")
                        .HasColumnType("date");

                    b.Property<int>("ClassesId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FeesAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FeesNameId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FeesSetupId");

                    b.HasIndex("ClassesId");

                    b.HasIndex("FeesNameId");

                    b.ToTable("FeesSetups");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.PersonalInfo", b =>
                {
                    b.Property<long>("PersonalnfoId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FatherMobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FatherOccupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("MotherMobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MotherOccupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonalnfoId");

                    b.ToTable("PersonalInfos");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.SpecialFee", b =>
                {
                    b.Property<long>("SpecialFeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SpecialFeesId"));

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ActiveDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeesNamesId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("InactiveDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("StudentInfosId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SpecialFeesId");

                    b.HasIndex("AcademicYear");

                    b.HasIndex("FeesNamesId");

                    b.HasIndex("StudentInfosId");

                    b.ToTable("SpecialFees");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.StudentAcademicHistory", b =>
                {
                    b.Property<long>("StudentAcademicHistoryId")
                        .HasColumnType("bigint");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("ClassSectionId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentAcademicHistoryId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassSectionId");

                    b.ToTable("StudentAcademicHistories");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.StudentInfo", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassesId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuardianMobileNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("GuardianName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GuardianRelation")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<long>("PersonalInfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("StudentAcademicHistoryId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassesId");

                    b.HasIndex("PersonalInfoId");

                    b.HasIndex("StudentAcademicHistoryId");

                    b.ToTable("StudentInfos");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Thana", b =>
                {
                    b.Property<int>("ThanaId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictsId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ThanaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ThanaId");

                    b.HasIndex("DistrictsId");

                    b.ToTable("Thanas");

                    b.HasData(
                        new
                        {
                            ThanaId = 1001,
                            DistrictsId = 101,
                            Remarks = "City center",
                            ThanaName = "Kotwali"
                        },
                        new
                        {
                            ThanaId = 1002,
                            DistrictsId = 101,
                            Remarks = "Industrial area",
                            ThanaName = "Pahartali"
                        },
                        new
                        {
                            ThanaId = 1003,
                            DistrictsId = 101,
                            Remarks = "Port area",
                            ThanaName = "Double Mooring"
                        },
                        new
                        {
                            ThanaId = 1004,
                            DistrictsId = 101,
                            Remarks = "Main Hathazari",
                            ThanaName = "Hathazari Sadar"
                        },
                        new
                        {
                            ThanaId = 1005,
                            DistrictsId = 101,
                            Remarks = "Hathazari Union",
                            ThanaName = "Fatehpur"
                        },
                        new
                        {
                            ThanaId = 1006,
                            DistrictsId = 101,
                            Remarks = "Hathazari Union",
                            ThanaName = "Dhalai"
                        },
                        new
                        {
                            ThanaId = 2001,
                            DistrictsId = 102,
                            Remarks = "Tourist town",
                            ThanaName = "Cox’s Bazar Sadar"
                        },
                        new
                        {
                            ThanaId = 2002,
                            DistrictsId = 102,
                            Remarks = "Southern tip",
                            ThanaName = "Teknaf"
                        },
                        new
                        {
                            ThanaId = 2003,
                            DistrictsId = 102,
                            Remarks = "Near Rohingya camps",
                            ThanaName = "Ukhiya"
                        },
                        new
                        {
                            ThanaId = 3001,
                            DistrictsId = 103,
                            Remarks = "Hill district HQ",
                            ThanaName = "Bandarban Sadar"
                        },
                        new
                        {
                            ThanaId = 3002,
                            DistrictsId = 103,
                            Remarks = "Hill upazila",
                            ThanaName = "Thanchi"
                        },
                        new
                        {
                            ThanaId = 3003,
                            DistrictsId = 103,
                            Remarks = "Hill upazila",
                            ThanaName = "Ruma"
                        },
                        new
                        {
                            ThanaId = 4001,
                            DistrictsId = 104,
                            Remarks = "Lake city",
                            ThanaName = "Rangamati Sadar"
                        },
                        new
                        {
                            ThanaId = 4002,
                            DistrictsId = 104,
                            Remarks = "Hydroelectric project",
                            ThanaName = "Kaptai"
                        },
                        new
                        {
                            ThanaId = 4003,
                            DistrictsId = 104,
                            Remarks = "Hill upazila",
                            ThanaName = "Baghaichhari"
                        },
                        new
                        {
                            ThanaId = 5001,
                            DistrictsId = 105,
                            Remarks = "Hill town",
                            ThanaName = "Khagrachari Sadar"
                        },
                        new
                        {
                            ThanaId = 5002,
                            DistrictsId = 105,
                            Remarks = "Border area",
                            ThanaName = "Dighinala"
                        },
                        new
                        {
                            ThanaId = 5003,
                            DistrictsId = 105,
                            Remarks = "Hill upazila",
                            ThanaName = "Mahalchhari"
                        },
                        new
                        {
                            ThanaId = 6001,
                            DistrictsId = 106,
                            Remarks = "Town area",
                            ThanaName = "Feni Sadar"
                        },
                        new
                        {
                            ThanaId = 6002,
                            DistrictsId = 106,
                            Remarks = "North Feni",
                            ThanaName = "Chhagalnaiya"
                        },
                        new
                        {
                            ThanaId = 6003,
                            DistrictsId = 106,
                            Remarks = "Border town",
                            ThanaName = "Parshuram"
                        },
                        new
                        {
                            ThanaId = 7001,
                            DistrictsId = 107,
                            Remarks = "Town area",
                            ThanaName = "Noakhali Sadar"
                        },
                        new
                        {
                            ThanaId = 7002,
                            DistrictsId = 107,
                            Remarks = "Industrial area",
                            ThanaName = "Begumganj"
                        },
                        new
                        {
                            ThanaId = 7003,
                            DistrictsId = 107,
                            Remarks = "Island upazila",
                            ThanaName = "Hatiya"
                        },
                        new
                        {
                            ThanaId = 8001,
                            DistrictsId = 108,
                            Remarks = "Town",
                            ThanaName = "Lakshmipur Sadar"
                        },
                        new
                        {
                            ThanaId = 8002,
                            DistrictsId = 108,
                            Remarks = "Coastal upazila",
                            ThanaName = "Raipur"
                        },
                        new
                        {
                            ThanaId = 8003,
                            DistrictsId = 108,
                            Remarks = "North Lakshmipur",
                            ThanaName = "Ramganj"
                        },
                        new
                        {
                            ThanaId = 9001,
                            DistrictsId = 109,
                            Remarks = "Town area",
                            ThanaName = "Brahmanbaria Sadar"
                        },
                        new
                        {
                            ThanaId = 9002,
                            DistrictsId = 109,
                            Remarks = "Power plant area",
                            ThanaName = "Ashuganj"
                        },
                        new
                        {
                            ThanaId = 9003,
                            DistrictsId = 109,
                            Remarks = "Agricultural hub",
                            ThanaName = "Nabinagar"
                        },
                        new
                        {
                            ThanaId = 10001,
                            DistrictsId = 110,
                            Remarks = "Town",
                            ThanaName = "Cumilla Sadar"
                        },
                        new
                        {
                            ThanaId = 10002,
                            DistrictsId = 110,
                            Remarks = "North Cumilla",
                            ThanaName = "Debidwar"
                        },
                        new
                        {
                            ThanaId = 10003,
                            DistrictsId = 110,
                            Remarks = "Railway town",
                            ThanaName = "Laksam"
                        },
                        new
                        {
                            ThanaId = 11001,
                            DistrictsId = 111,
                            Remarks = "Town",
                            ThanaName = "Chandpur Sadar"
                        },
                        new
                        {
                            ThanaId = 11002,
                            DistrictsId = 111,
                            Remarks = "River area",
                            ThanaName = "Haimchar"
                        },
                        new
                        {
                            ThanaId = 11003,
                            DistrictsId = 111,
                            Remarks = "Upazila",
                            ThanaName = "Shahrasti"
                        });
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Address", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.PersonalInfo", "PersonalInfo")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonalInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.Thana", "Thana")
                        .WithMany()
                        .HasForeignKey("ThanaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("PersonalInfo");

                    b.Navigation("Thana");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.ClassSection", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.Classes", "Classes")
                        .WithMany("ClassSection")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.Section", "Section")
                        .WithMany("ClassSection")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.District", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Division");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Division", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.FeesCollectionDetail", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.FeesCollectionMaster", "FeesCollectionMaster")
                        .WithMany("FeesCollectionDetails")
                        .HasForeignKey("FeesCollectionMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.FeesName", "FeesName")
                        .WithMany()
                        .HasForeignKey("FeesNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FeesCollectionMaster");

                    b.Navigation("FeesName");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.FeesCollectionMaster", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.StudentInfo", "StudentInfo")
                        .WithMany()
                        .HasForeignKey("StudentInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("StudentInfo");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.FeesSetup", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.Classes", "Classes")
                        .WithMany("FeesSetup")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.FeesName", "FeesName")
                        .WithMany("FeesSetup")
                        .HasForeignKey("FeesNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("FeesName");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.SpecialFee", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.AcademicYear", "AcademicYears")
                        .WithMany()
                        .HasForeignKey("AcademicYear")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.FeesName", "FeesName")
                        .WithMany()
                        .HasForeignKey("FeesNamesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.StudentInfo", "StudentInfo")
                        .WithMany()
                        .HasForeignKey("StudentInfosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYears");

                    b.Navigation("FeesName");

                    b.Navigation("StudentInfo");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.StudentAcademicHistory", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.AcademicYear", "AcademicYear")
                        .WithMany("StudentAcademicHistory")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.ClassSection", "ClassSection")
                        .WithMany("StudentAcademicHistory")
                        .HasForeignKey("ClassSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("ClassSection");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.StudentInfo", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.AcademicYear", null)
                        .WithMany("StudentInfo")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("School.AdminService.Data.Entities.Classes", null)
                        .WithMany("StudentInfo")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("School.AdminService.Data.Entities.PersonalInfo", "PersonalInfo")
                        .WithMany()
                        .HasForeignKey("PersonalInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("School.AdminService.Data.Entities.StudentAcademicHistory", "StudentAcademicHistory")
                        .WithMany("StudentInfos")
                        .HasForeignKey("StudentAcademicHistoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalInfo");

                    b.Navigation("StudentAcademicHistory");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Thana", b =>
                {
                    b.HasOne("School.AdminService.Data.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("District");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.AcademicYear", b =>
                {
                    b.Navigation("StudentAcademicHistory");

                    b.Navigation("StudentInfo");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.ClassSection", b =>
                {
                    b.Navigation("StudentAcademicHistory");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Classes", b =>
                {
                    b.Navigation("ClassSection");

                    b.Navigation("FeesSetup");

                    b.Navigation("StudentInfo");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.FeesCollectionMaster", b =>
                {
                    b.Navigation("FeesCollectionDetails");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.FeesName", b =>
                {
                    b.Navigation("FeesSetup");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.PersonalInfo", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.Section", b =>
                {
                    b.Navigation("ClassSection");
                });

            modelBuilder.Entity("School.AdminService.Data.Entities.StudentAcademicHistory", b =>
                {
                    b.Navigation("StudentInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
